{"version":3,"sources":["Components/Board/Board.module.css","Components/Status/Status.module.css","Components/Button/Button.module.css","Components/Modal/Modal.module.css","Components/Board/Grid/Grid.js","Components/Board/Board.js","Components/Status/Status.js","Components/Button/Button.js","Components/Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","grid","props","blank","classes","Grid","classesForCircle","Circle","classesForX","X","onClick","clicked","className","value","join","onMouseOver","hovered","onMouseLeave","stopHovered","Board","clickHandler","index","event","grids","updateGrid","hoverNextPlayer","player","target","stopHoverNextPlayer","bind","Object","keys","this","map","gridKey","key","currentPlayer","Component","status","statusMessage","message","Status","button","reset","Button","modal","Modal","App","setMessageHandler","param","setState","gameOver","updateGridHandler","updatedGrids","state","prevState","checkDraw","checkWin","restartGame","baseState","winningCombination","i","length","a","b","c","setMessage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.71a9fb87.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__3h6CI\",\"Grid\":\"Board_Grid__2z6m2\",\"X\":\"Board_X__L02hq\",\"Circle\":\"Board_Circle__M6Lr9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Status\":\"Status_Status__2zkaP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3UgBb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__19CwT\"};","import React from 'react';\r\nimport classes from '../../Board/Board.module.css';\r\n\r\nconst grid = (props) => {\r\n  let blank = classes.Grid;\r\n  let classesForCircle = [classes.Grid, classes.Circle];\r\n  let classesForX = [classes.Grid, classes.X];\r\n  return (\r\n  <div onClick={props.clicked}\r\n  className={(props.value === null) ?\r\n    blank : (props.value === true) ?\r\n    classesForCircle.join(' ') : classesForX.join(' ')\r\n  }\r\n  onMouseOver={props.hovered}\r\n  onMouseLeave={props.stopHovered}>\r\n    {props.value}\r\n  </div>\r\n);\r\n}\r\n\r\n\r\nexport default grid;\r\n","import React, { Component } from 'react';\r\nimport classes from './Board.module.css';\r\n\r\nimport Grid from './Grid/Grid';\r\n\r\nclass Board extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.clickHandler = this.clickHandler.bind(this);\r\n    this.hoverNextPlayer = this.hoverNextPlayer.bind(this);\r\n    this.stopHoverNextPlayer = this.stopHoverNextPlayer.bind(this);\r\n  }\r\n\r\n    clickHandler = (index, event) => {\r\n      if (this.props.grids[index] === null) {\r\n          this.props.updateGrid(index);\r\n          }\r\n  }\r\n\r\n    hoverNextPlayer = (index, event) => {\r\n      if (this.props.grids[index] === null) {\r\n        let classesForCircle = [classes.Grid, classes.Circle];\r\n        let classesForX = [classes.Grid, classes.X];\r\n        (this.props.player) ?\r\n        event.target.className = classesForCircle.join(' ') :\r\n        event.target.className = classesForX.join(' ');\r\n      }\r\n    }\r\n\r\n    stopHoverNextPlayer = (index, event) => {\r\n      if (this.props.grids[index] === null) {\r\n        event.target.className = classes.Grid;\r\n      }\r\n    }\r\n\r\n\r\nrender() {\r\n  let grids = Object.keys(this.props.grids)\r\n  .map((gridKey, index) => <Grid\r\n  clicked={(event) => this.clickHandler(index, event)}\r\n  hovered={(event) => this.hoverNextPlayer(index, event)}\r\n  stopHovered={(event) => this.stopHoverNextPlayer(index, event)}\r\n  key={index}\r\n  value={this.props.grids[gridKey]}\r\n  currentPlayer={this.props.player}\r\n  />\r\n  );\r\n\r\n  return (\r\n    <div className={classes.Board}>\r\n      {grids}\r\n    </div>\r\n);\r\n}\r\n\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport classes from './Status.module.css';\r\n\r\nconst status = (props) => {\r\n\r\n  let nextPlayer = null;\r\n  (props.player) ? nextPlayer = 'O' : nextPlayer = 'X';\r\n  let statusMessage = \"Next player is: \" + nextPlayer;\r\n  if (props.message !== null) {\r\n    statusMessage = props.message\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Status}>\r\n     {statusMessage}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default status;\r\n","import React from 'react';\r\nimport classes from './Button.module.css';\r\n\r\nconst button = (props) => {\r\n  return (\r\n    <div>\r\n      <button onClick={props.reset}\r\n      className={classes.Button}>Restart\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default button;\r\n","import React from 'react';\r\nimport classes from './Modal.module.css';\r\n\r\nconst modal = (props) => {\r\n  return (<div className={classes.Modal}></div>);\r\n}\r\n\r\nexport default modal;\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Board from './Components/Board/Board';\nimport Status from './Components/Status/Status';\nimport Button from './Components/Button/Button';\nimport Modal from './Components/Modal/Modal';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentPlayer: false, //false is X, true is O\n      message: null,\n      gameOver: false,\n      grids : {\n        '0': null,\n        '1': null,\n        '2': null,\n        '3': null,\n        '4': null,\n        '5': null,\n        '6': null,\n        '7': null,\n        '8': null\n    }\n  }\n  this.baseState = this.state;\n  this.setMessageHandler = this.setMessageHandler.bind(this);\n  this.updateGridHandler = this.updateGridHandler.bind(this);\n  this.restartGame = this.restartGame.bind(this);\n  this.checkWin = this.checkWin.bind(this);\n  this.checkDraw = this.checkDraw.bind(this);\n}\n\nsetMessageHandler = (param) => {\n  switch(param) {\n    case true:\n    this.setState({message: 'Circle is the winner!', gameOver: true})\n    break;\n    case false:\n    this.setState({message: 'X is the winner!', gameOver: true});\n    break;\n    default:\n    this.setState({message: 'It is a draw!!!', gameOver: true});\n  }\n}\n\nupdateGridHandler = (index) => {\n  let updatedGrids = {...this.state.grids};\n  updatedGrids[index] = this.state.currentPlayer;\n  this.setState(prevState => ({currentPlayer: !prevState.currentPlayer,\n     grids: updatedGrids}),\n     () => {\n        this.checkDraw();\n        this.checkWin();\n       });\n}\n\n\n  restartGame = () => {\n    this.setState(this.baseState);\n  }\n\n  checkWin = () => {\n    const winningCombination = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [2, 4, 6],\n      [0, 4, 8],\n    ];\n\n    for (let i = 0; i < winningCombination.length; i++) {\n    const [a, b, c] = winningCombination[i];\n    if (this.state.grids[a] && this.state.grids[b] &&\n       this.state.grids[c]) {\n         this.setMessageHandler(true);\n       }\n      else if (this.state.grids[a] === false &&\n        this.state.grids[b] === false &&\n           this.state.grids[c] === false) {\n             this.setMessageHandler(false);\n    }\n  }\n  }\n\n  checkDraw = () => {\n    for(let grid in this.state.grids)\n            if(this.state.grids[grid] === null) return false;\n          this.setMessageHandler('draw');\n  }\n\n  render() {\n    let button = (this.state.message) !== null ? <Button reset={this.restartGame}/> : null;\n    let modal = (this.state.gameOver) ? <Modal /> : null;\n    return (\n\n      <div className=\"App\">\n      {modal}\n        <div className=\"Content\">\n          <h1>Tic Tac Toe</h1>\n          <Status player={this.state.currentPlayer}\n          message={this.state.message} />\n          {button}\n          <Board setMessage={this.setMessageHandler}\n          player={this.state.currentPlayer}\n          grids={this.state.grids}\n          updateGrid={(index) => this.updateGridHandler(index)}\n          />\n        </div>\n      </div>\n\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}